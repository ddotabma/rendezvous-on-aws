from dataclasses import dataclass, asdict
import json


@dataclass
class BostonRequest:
    """Parameters specific to the boston dataset"""
    CRIM: float  # per capita crime rate by town
    ZN: float  # proportion of residential land zoned for lots over 25,000 sq.ft.
    INDUS: float  # proportion of non-retail business acres per town
    CHAS: float  # Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)
    NOX: float  # nitric oxides concentration (parts per 10 million)
    RM: float  # average number of rooms per dwelling
    AGE: float  # proportion of owner-occupied units built prior to 1940
    DIS: float  # weighted distances to five Boston employment centres
    RAD: float  # index of accessibility to radial highways
    TAX: float  # full-value property-tax rate per $10,000
    PTRATIO: float  # pupil-teacher ratio by town
    B: float  # 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town
    LSTAT: float  # % lower status of the population


@dataclass
class Specifications:
    # specific fields for the Boston pricing case
    request: BostonRequest

    def __post_init__(self):
        if isinstance(self.request, dict):
            self.request = BostonRequest(**self.request)  # noqa


@dataclass
class RendezvousMessage:
    uuid: str  # unique identifier to identify the request
    model: str  # name of the (ML) model from which the results originate
    datetime: str  # timestamp
    rendezvous_time: float  # start time of rendezvous model
    data: Specifications  # specific fields for the Boston pricing case
    kinesis_stream: str  # the Kinesis stream name used to the rendezvous architecture

    def __post_init__(self):
        if isinstance(self.data, dict):
            self.data = Specifications(**self.data)  # noqa

    def json(self):
        return json.dumps(asdict(self))


@dataclass
class Message:
    Message: RendezvousMessage

    def __post_init__(self):
        self.Message = RendezvousMessage(**json.loads(self.Message))  # noqa


@dataclass
class BostonEvent:
    """SQS message for boston event. It's a SQS event for lambda, with
    data model specific to the Boston case implemented."""
    messageId: str
    receiptHandle: str
    attributes: dict
    body: Message
    md5OfBody: str
    eventSourceARN: str
    messageAttributes: str
    awsRegion: str
    eventSource: str

    def __post_init__(self):
        self.body = Message(Message=json.loads(self.body)["Message"])  # noqa


@dataclass
class JsonModelResult:
    """Provide method to return class contents as json string"""
    def json(self) -> str:
        return json.dumps(asdict(self))


@dataclass
class ModelResult(JsonModelResult):
    test_score: float
    train_score: float
    price: float  # calculated price of Boston apartment


@dataclass
class ModelResponse(JsonModelResult):
    """Results from a model running the Boston case"""
    uuid: str  # unique request identifier
    start_time: float  # start time of the model
    duration: float  # time the model took
    time_after_rendezvous: float  # seconds after the time at which the request came in
    model: str  # model name
    results: ModelResult  # json dumps


@dataclass
class ModelError(JsonModelResult):
    traceback: str  # error stacktract
    message: str  # error message
    uuid: str  # request id
    model: str  # model name
